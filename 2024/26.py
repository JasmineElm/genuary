#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
    Genuine 2024, day 26: "Grow a seed."
"""
import random
import numpy as np
import toml

# local libraries
from helpers import svg, utils, draw

# Load config file and set DEFAULT parameters
config = toml.load("config.toml")
DEFAULT = config["DEFAULT"]
DEFAULT.update({"PAPER_SIZE": svg.set_image_size(DEFAULT['SIZE'],
                                                 DEFAULT['PPMM'],
                                                 DEFAULT['LANDSCAPE'])})
DEFAULT.update({"DRAWABLE_AREA": svg.set_drawable_area(DEFAULT['PAPER_SIZE'],
                                                       DEFAULT['BLEED'])})
DEFAULT.update({"FILENAME": utils.create_dir(
    DEFAULT['OUTPUT_DIR']) + utils.generate_filename()})


# LOCAL VARIABLES
AXIOM = "X"
RULES = {"X": "F+[[X]-X]-F[-FX]+X", "F": "FF"}
N = 7
LINE_LENGTH = 7
ANGLE = 90
MAX_ANGLE_OFFSET = 45
MIN_ANGLE_OFFSET = 22
ANGLE_OFFSET = random.randint(MIN_ANGLE_OFFSET, MAX_ANGLE_OFFSET)

CENTRE = svg.get_centre(DEFAULT['DRAWABLE_AREA'])
# convert CENTRE to list
CENTRE = list(CENTRE)

GRAD_1 = '#4caf50'
GRAD_2 = '#194d33'

CENTRE[1] = DEFAULT['DRAWABLE_AREA'][3] - 10
LINE_STYLE = {'stroke': '#fff', 'stroke-width': 3, "stroke-linecap": "round"}

# LOCAL FUNCTIONS

# function to set a gradient from colour1 to colour2


def set_gradient(colour1, colour2, gradient_id):
    """
    Returns:
        str: An SVG linearGradient element as a string.
    """
    gradient = f"<linearGradient id='{
        gradient_id}' x1='0%' y1='0%' x2='0%' y2='100%'>"
    gradient += f"<stop offset='0%' style='stop-color:{
        colour1};stop-opacity:1' />"
    gradient += f"<stop offset='100%' style='stop-color:{
        colour2};stop-opacity:1' />"
    gradient += "</linearGradient>"
    return gradient


def set_lsys_string(axiom, rules, n):
    """
    Generates a string of characters based on the axiom and rules.

    Parameters:
    axiom (str): The starting string.
    rules (dict): A dictionary of rules to apply to the string.
    n (int): The number of iterations to perform.

    Returns:
    str: A string of characters generated by applying the rules to the axiom.
    """
    string = axiom
    for _ in range(n):
        string = "".join([rules.get(c, c) for c in string])
    return string


def lsys_to_lines(lsys, start_xy, angle, length, angle_offset):
    """
    Generates a list of lines from a string of characters.

    Parameters:
    lsys (str): The string of characters to convert to lines.
    start_xy (tuple): The starting coordinates of the lines.
    angle (float): The angle of the lines.
    length (float): The length of the lines.
    angle_offset (float): The angle offset to apply to the lines.

    Returns:
    list: A list of lines generated from the string of characters.
    """
    lines = []
    stack = []
    x, y = start_xy
    for c in lsys:
        if c == "F":
            x2 = x - length * np.cos(np.radians(angle))
            y2 = y - length * np.sin(np.radians(angle))
            lines.append(((x, y), (x2, y2)))
            x, y = x2, y2
        elif c == "+":
            angle += angle_offset
        elif c == "-":
            angle -= angle_offset
        elif c == "[":
            stack.append((x, y, angle))
        elif c == "]":
            x, y, angle = stack.pop()
    return lines


#
utils.print_params(DEFAULT)

svg_list = []
# draw background
defs = f"<defs>{set_gradient(GRAD_1, GRAD_2, 'gradient')}</defs>"
svg_list.append(defs)
svg_list.append(svg.set_background(
    DEFAULT['DRAWABLE_AREA'], "url(#gradient)"))
svg_list.append(svg.set_clip_path(DEFAULT['DRAWABLE_AREA']))

# fill svg_list with svg objects

LSYS_DEF = set_lsys_string(AXIOM, RULES, N)
line_defs = lsys_to_lines(LSYS_DEF, CENTRE, ANGLE, LINE_LENGTH, ANGLE_OFFSET)
for line in line_defs:
    svg_list.append(draw.line(line[0], line[1], LINE_STYLE))
doc = svg.build_svg_file(
    DEFAULT['PAPER_SIZE'], DEFAULT['DRAWABLE_AREA'], svg_list)
svg.write_file(DEFAULT['FILENAME'], doc)
