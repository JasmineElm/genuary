"""L-System Functions
"""
import numpy as np


def set_lsys_string(axiom, rules, n):
    """
    Generates a string of characters based on the axiom and rules.

    Parameters:
    axiom (str): The starting string.
    rules (dict): A dictionary of rules to apply to the string.
    n (int): The number of iterations to perform.

    Returns:
    str: A string of characters generated by applying the rules to the axiom.
    """
    string = axiom
    for _ in range(n):
        string = "".join([rules.get(c, c) for c in string])
    return string



def lsys_to_lines(lsys, start_xy, angle, length, angle_offset):
    """
    Generates a list of lines from a string of characters.

    Parameters:
    lsys (str): The string of characters to convert to lines.
    start_xy (tuple): The starting coordinates of the lines.
    angle (float): The angle of the lines.
    length (float): The length of the lines.
    angle_offset (float): The angle offset to apply to the lines.

    Returns:
    list: A list of lines generated from the string of characters.
    """
    lines = []
    stack = []
    x, y = start_xy
    for c in lsys:
        if c == "F":
            x2 = x - length * np.cos(np.radians(angle))
            y2 = y - length * np.sin(np.radians(angle))
            lines.append(((x, y), (x2, y2)))
            x, y = x2, y2
        elif c == "+":
            angle += angle_offset
        elif c == "-":
            angle -= angle_offset
        elif c == "[":
            stack.append((x, y, angle))
        elif c == "]":
            x, y, angle = stack.pop()
        elif c == "X":
            pass
    return lines
